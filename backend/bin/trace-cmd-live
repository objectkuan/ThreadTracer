#!/bin/bash
CURDIR=$(cd `dirname $0`; pwd)
source $CURDIR/trconfig.sh

# clear everything
echo "" > $TRACEDIR/set_ftrace_pid
echo 0 > $TRACEDIR/options/userstacktrace
echo 0 > $TRACEDIR/options/stacktrace
killall -9 filter

# trace event
echo "" > $TRACEDIR/set_event
#    pause
# trace_event syscalls:sys_exit_pause
# trace_event syscalls:sys_enter_pause
#    sleep
# trace_event syscalls:sys_exit_nanosleep
# trace_event syscalls:sys_enter_nanosleep
# trace_event syscalls:sys_exit_clock_nanosleep
# trace_event syscalls:sys_enter_clock_nanosleep
#    wakeup
trace_event sched:sched_wakeup_new
trace_event sched:sched_wakeup
# trace_event sched:sched_process_fork
#    exit
trace_event sched:sched_process_exit
#    futex
trace_event syscalls:sys_enter_futex
trace_event syscalls:sys_exit_futex
#    poll
trace_event syscalls:sys_enter_poll
trace_event syscalls:sys_exit_poll
#    scheduler switch
# trace_event sched:sched_switch
# echo "do_fork" > $TRACEDIR/set_ftrace_filter

# clear everything
echo nop > $TRACEDIR/current_tracer
echo 0 > $TRACEDIR/tracing_on
echo 0 > $TRACEDIR/trace

# set the tracing clock
echo perf > $TRACEDIR/trace_clock

# set pid
touch $TRACED_PIDS_FILE
cat $TRACED_PIDS_FILE | xargs -i echo {} >> $TRACEDIR/set_ftrace_pid
# PID=$1
# echo $PID >> $TRACEDIR/set_ftrace_pid
PIDS=`cd $CURDIR && ./forfront/cat-trace-pids`
PIDS=${PIDS//[}
PIDS=${PIDS//]}

# filtering
mkdir -p $OUTDIR
DEBUGGING=`cd $CURDIR && cat debugging`
if [ "$DEBUGGING" -eq "1" ]; then
	filter_option=0
else
	filter_option=3
fi
filter_cmd="./filter $TRACED_PIDS_FILE $filter_option $TRACEDIR/trace_pipe $OUTDIR 5000 > $OUTDIR/ball.3"
echo $filter_cmd
bash -c "cd $CURDIR && $filter_cmd" &

# recording memory
echo "" > $OUTDIR/memory
mem_cmd="./record-mem-usage $PIDS $OUTDIR/memory"
echo $mem_cmd
bash -c "cd $CURDIR && $mem_cmd" &

# perf's place
perf record -e ref-cycles --call-graph dwarf -F 97 -p $PIDS -o $OUTDIR/perf.data &

echo $! > $OUTDIR/perf.pid

echo 1 > $TRACEDIR/tracing_on
echo 0 > $TRACEDIR/trace

